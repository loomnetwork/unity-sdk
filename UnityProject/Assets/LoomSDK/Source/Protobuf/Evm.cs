// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/evm.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Loom.Google.Protobuf;
using pbc = global::Loom.Google.Protobuf.Collections;
using pbr = global::Loom.Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Loom.Client.Internal.Protobuf {

  /// <summary>Holder for reflection information generated from proto/evm.proto</summary>
  internal static partial class EvmReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/evm.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EvmReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wcm90by9ldm0ucHJvdG8aEHByb3RvL2xvb20ucHJvdG8irgEKEUV0aEZp",
            "bHRlckVudmVsb3BlEjAKE2V0aF9ibG9ja19oYXNoX2xpc3QYASABKAsyES5F",
            "dGhCbG9ja0hhc2hMaXN0SAASMAoTZXRoX2ZpbHRlcl9sb2dfbGlzdBgCIAEo",
            "CzIRLkV0aEZpbHRlckxvZ0xpc3RIABIqChBldGhfdHhfaGFzaF9saXN0GAMg",
            "ASgLMg4uRXRoVHhIYXNoTGlzdEgAQgkKB21lc3NhZ2UiKgoQRXRoQmxvY2tI",
            "YXNoTGlzdBIWCg5ldGhfYmxvY2tfaGFzaBgBIAMoDCIkCg1FdGhUeEhhc2hM",
            "aXN0EhMKC2V0aF90eF9oYXNoGAEgAygMIisKDUV2ZW50RGF0YUxpc3QSGgoG",
            "ZXZlbnRzGAEgAygLMgouRXZlbnREYXRhIrwBCglFdmVudERhdGESDgoGdG9w",
            "aWNzGAEgAygJEhgKBmNhbGxlchgCIAEoCzIILkFkZHJlc3MSGQoHYWRkcmVz",
            "cxgDIAEoCzIILkFkZHJlc3MSEwoLcGx1Z2luX25hbWUYBCABKAkSFAoMYmxv",
            "Y2tfaGVpZ2h0GAUgASgEEhQKDGVuY29kZWRfYm9keRgGIAEoDBIYChBvcmln",
            "aW5hbF9yZXF1ZXN0GAcgASgMEg8KB3R4X2hhc2gYCCABKAwiMwoNVHhSZWNl",
            "aXB0TGlzdBIiCgt0eF9yZWNlaXB0cxgBIAMoCzINLkV2bVR4UmVjZWlwdCLr",
            "AQoMRXZtVHhSZWNlaXB0EhkKEXRyYW5zYWN0aW9uX2luZGV4GAEgASgFEhIK",
            "CmJsb2NrX2hhc2gYAiABKAwSFAoMYmxvY2tfbnVtYmVyGAMgASgDEhsKE2N1",
            "bXVsYXRpdmVfZ2FzX3VzZWQYBCABKAUSEAoIZ2FzX3VzZWQYBSABKAUSGAoQ",
            "Y29udHJhY3RfYWRkcmVzcxgGIAEoDBIYCgRsb2dzGAcgAygLMgouRXZlbnRE",
            "YXRhEhIKCmxvZ3NfYmxvb20YCCABKAwSDgoGc3RhdHVzGAkgASgFEg8KB3R4",
            "X2hhc2gYCiABKAwixwEKC0V2bVR4T2JqZWN0EgwKBGhhc2gYASABKAwSDQoF",
            "bm9uY2UYAiABKAQSEgoKYmxvY2tfaGFzaBgDIAEoDBIUCgxibG9ja19udW1i",
            "ZXIYBCABKAMSGQoRdHJhbnNhY3Rpb25faW5kZXgYBSABKAUSDAoEZnJvbRgG",
            "IAEoDBIKCgJ0bxgHIAEoDBINCgV2YWx1ZRgIIAEoAxIRCglnYXNfcHJpY2UY",
            "CSABKAMSCwoDZ2FzGAogASgDEg0KBWlucHV0GAsgASgMIvoCCgxFdGhCbG9j",
            "a0luZm8SDgoGbnVtYmVyGAEgASgDEgwKBGhhc2gYAiABKAwSEwoLcGFyZW50",
            "X2hhc2gYAyABKAwSDQoFbm9uY2UYBCABKAwSEwoLc2hhM191bmNsZXMYBSAB",
            "KAwSEgoKbG9nc19ibG9vbRgGIAEoDBIZChF0cmFuc2FjdGlvbnNfcm9vdBgH",
            "IAEoDBISCgpzdGF0ZV9yb290GAggASgMEhUKDXJlY2VpcHRzX3Jvb3QYCSAB",
            "KAwSDQoFbWluZXIYCiABKAwSEgoKZGlmZmljdWx0eRgLIAEoAxIYChB0b3Rh",
            "bF9kaWZmaWN1bHR5GAwgASgDEhIKCmV4dHJhX2RhdGEYDSABKAwSDAoEc2l6",
            "ZRgOIAEoAxIQCghnYXNMaW1pdBgPIAEoAxIPCgdnYXNVc2VkGBAgASgDEhEK",
            "CXRpbWVzdGFtcBgRIAEoAxIUCgx0cmFuc2FjdGlvbnMYEiADKAwSDgoGdW5j",
            "bGVzGBMgAygMIjkKEEV0aEZpbHRlckxvZ0xpc3QSJQoOZXRoX2Jsb2NrX2xv",
            "Z3MYASADKAsyDS5FdGhGaWx0ZXJMb2ciwAEKDEV0aEZpbHRlckxvZxIPCgdy",
            "ZW1vdmVkGAEgASgIEhEKCWxvZ19pbmRleBgCIAEoAxIZChF0cmFuc2FjdGlv",
            "bl9pbmRleBgDIAEoBRIYChB0cmFuc2FjdGlvbl9oYXNoGAQgASgMEhIKCmJs",
            "b2NrX2hhc2gYBSABKAwSFAoMYmxvY2tfbnVtYmVyGAYgASgDEg8KB2FkZHJl",
            "c3MYByABKAwSDAoEZGF0YRgIIAEoDBIOCgZ0b3BpY3MYCSADKAxCIKoCHUxv",
            "b20uQ2xpZW50LkludGVybmFsLlByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Loom.Client.Internal.Protobuf.LoomReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EthFilterEnvelope), global::Loom.Client.Internal.Protobuf.EthFilterEnvelope.Parser, new[]{ "EthBlockHashList", "EthFilterLogList", "EthTxHashList" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EthBlockHashList), global::Loom.Client.Internal.Protobuf.EthBlockHashList.Parser, new[]{ "EthBlockHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EthTxHashList), global::Loom.Client.Internal.Protobuf.EthTxHashList.Parser, new[]{ "EthTxHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EventDataList), global::Loom.Client.Internal.Protobuf.EventDataList.Parser, new[]{ "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EventData), global::Loom.Client.Internal.Protobuf.EventData.Parser, new[]{ "Topics", "Caller", "Address", "PluginName", "BlockHeight", "EncodedBody", "OriginalRequest", "TxHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.TxReceiptList), global::Loom.Client.Internal.Protobuf.TxReceiptList.Parser, new[]{ "TxReceipts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EvmTxReceipt), global::Loom.Client.Internal.Protobuf.EvmTxReceipt.Parser, new[]{ "TransactionIndex", "BlockHash", "BlockNumber", "CumulativeGasUsed", "GasUsed", "ContractAddress", "Logs", "LogsBloom", "Status", "TxHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EvmTxObject), global::Loom.Client.Internal.Protobuf.EvmTxObject.Parser, new[]{ "Hash", "Nonce", "BlockHash", "BlockNumber", "TransactionIndex", "From", "To", "Value", "GasPrice", "Gas", "Input" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EthBlockInfo), global::Loom.Client.Internal.Protobuf.EthBlockInfo.Parser, new[]{ "Number", "Hash", "ParentHash", "Nonce", "Sha3Uncles", "LogsBloom", "TransactionsRoot", "StateRoot", "ReceiptsRoot", "Miner", "Difficulty", "TotalDifficulty", "ExtraData", "Size", "GasLimit", "GasUsed", "Timestamp", "Transactions", "Uncles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EthFilterLogList), global::Loom.Client.Internal.Protobuf.EthFilterLogList.Parser, new[]{ "EthBlockLogs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Loom.Client.Internal.Protobuf.EthFilterLog), global::Loom.Client.Internal.Protobuf.EthFilterLog.Parser, new[]{ "Removed", "LogIndex", "TransactionIndex", "TransactionHash", "BlockHash", "BlockNumber", "Address", "Data", "Topics" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class EthFilterEnvelope : pb::IMessage<EthFilterEnvelope> {
    private static readonly pb::MessageParser<EthFilterEnvelope> _parser = new pb::MessageParser<EthFilterEnvelope>(() => new EthFilterEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EthFilterEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterEnvelope(EthFilterEnvelope other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.EthBlockHashList:
          EthBlockHashList = other.EthBlockHashList.Clone();
          break;
        case MessageOneofCase.EthFilterLogList:
          EthFilterLogList = other.EthFilterLogList.Clone();
          break;
        case MessageOneofCase.EthTxHashList:
          EthTxHashList = other.EthTxHashList.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterEnvelope Clone() {
      return new EthFilterEnvelope(this);
    }

    /// <summary>Field number for the "eth_block_hash_list" field.</summary>
    public const int EthBlockHashListFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Internal.Protobuf.EthBlockHashList EthBlockHashList {
      get { return messageCase_ == MessageOneofCase.EthBlockHashList ? (global::Loom.Client.Internal.Protobuf.EthBlockHashList) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EthBlockHashList;
      }
    }

    /// <summary>Field number for the "eth_filter_log_list" field.</summary>
    public const int EthFilterLogListFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Internal.Protobuf.EthFilterLogList EthFilterLogList {
      get { return messageCase_ == MessageOneofCase.EthFilterLogList ? (global::Loom.Client.Internal.Protobuf.EthFilterLogList) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EthFilterLogList;
      }
    }

    /// <summary>Field number for the "eth_tx_hash_list" field.</summary>
    public const int EthTxHashListFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Internal.Protobuf.EthTxHashList EthTxHashList {
      get { return messageCase_ == MessageOneofCase.EthTxHashList ? (global::Loom.Client.Internal.Protobuf.EthTxHashList) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.EthTxHashList;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      EthBlockHashList = 1,
      EthFilterLogList = 2,
      EthTxHashList = 3,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EthFilterEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EthFilterEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EthBlockHashList, other.EthBlockHashList)) return false;
      if (!object.Equals(EthFilterLogList, other.EthFilterLogList)) return false;
      if (!object.Equals(EthTxHashList, other.EthTxHashList)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.EthBlockHashList) hash ^= EthBlockHashList.GetHashCode();
      if (messageCase_ == MessageOneofCase.EthFilterLogList) hash ^= EthFilterLogList.GetHashCode();
      if (messageCase_ == MessageOneofCase.EthTxHashList) hash ^= EthTxHashList.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.EthBlockHashList) {
        output.WriteRawTag(10);
        output.WriteMessage(EthBlockHashList);
      }
      if (messageCase_ == MessageOneofCase.EthFilterLogList) {
        output.WriteRawTag(18);
        output.WriteMessage(EthFilterLogList);
      }
      if (messageCase_ == MessageOneofCase.EthTxHashList) {
        output.WriteRawTag(26);
        output.WriteMessage(EthTxHashList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.EthBlockHashList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EthBlockHashList);
      }
      if (messageCase_ == MessageOneofCase.EthFilterLogList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EthFilterLogList);
      }
      if (messageCase_ == MessageOneofCase.EthTxHashList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EthTxHashList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EthFilterEnvelope other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.EthBlockHashList:
          if (EthBlockHashList == null) {
            EthBlockHashList = new global::Loom.Client.Internal.Protobuf.EthBlockHashList();
          }
          EthBlockHashList.MergeFrom(other.EthBlockHashList);
          break;
        case MessageOneofCase.EthFilterLogList:
          if (EthFilterLogList == null) {
            EthFilterLogList = new global::Loom.Client.Internal.Protobuf.EthFilterLogList();
          }
          EthFilterLogList.MergeFrom(other.EthFilterLogList);
          break;
        case MessageOneofCase.EthTxHashList:
          if (EthTxHashList == null) {
            EthTxHashList = new global::Loom.Client.Internal.Protobuf.EthTxHashList();
          }
          EthTxHashList.MergeFrom(other.EthTxHashList);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Loom.Client.Internal.Protobuf.EthBlockHashList subBuilder = new global::Loom.Client.Internal.Protobuf.EthBlockHashList();
            if (messageCase_ == MessageOneofCase.EthBlockHashList) {
              subBuilder.MergeFrom(EthBlockHashList);
            }
            input.ReadMessage(subBuilder);
            EthBlockHashList = subBuilder;
            break;
          }
          case 18: {
            global::Loom.Client.Internal.Protobuf.EthFilterLogList subBuilder = new global::Loom.Client.Internal.Protobuf.EthFilterLogList();
            if (messageCase_ == MessageOneofCase.EthFilterLogList) {
              subBuilder.MergeFrom(EthFilterLogList);
            }
            input.ReadMessage(subBuilder);
            EthFilterLogList = subBuilder;
            break;
          }
          case 26: {
            global::Loom.Client.Internal.Protobuf.EthTxHashList subBuilder = new global::Loom.Client.Internal.Protobuf.EthTxHashList();
            if (messageCase_ == MessageOneofCase.EthTxHashList) {
              subBuilder.MergeFrom(EthTxHashList);
            }
            input.ReadMessage(subBuilder);
            EthTxHashList = subBuilder;
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EthBlockHashList : pb::IMessage<EthBlockHashList> {
    private static readonly pb::MessageParser<EthBlockHashList> _parser = new pb::MessageParser<EthBlockHashList>(() => new EthBlockHashList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EthBlockHashList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthBlockHashList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthBlockHashList(EthBlockHashList other) : this() {
      ethBlockHash_ = other.ethBlockHash_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthBlockHashList Clone() {
      return new EthBlockHashList(this);
    }

    /// <summary>Field number for the "eth_block_hash" field.</summary>
    public const int EthBlockHashFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ethBlockHash_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> ethBlockHash_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> EthBlockHash {
      get { return ethBlockHash_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EthBlockHashList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EthBlockHashList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ethBlockHash_.Equals(other.ethBlockHash_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ethBlockHash_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ethBlockHash_.WriteTo(output, _repeated_ethBlockHash_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ethBlockHash_.CalculateSize(_repeated_ethBlockHash_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EthBlockHashList other) {
      if (other == null) {
        return;
      }
      ethBlockHash_.Add(other.ethBlockHash_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ethBlockHash_.AddEntriesFrom(input, _repeated_ethBlockHash_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EthTxHashList : pb::IMessage<EthTxHashList> {
    private static readonly pb::MessageParser<EthTxHashList> _parser = new pb::MessageParser<EthTxHashList>(() => new EthTxHashList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EthTxHashList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthTxHashList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthTxHashList(EthTxHashList other) : this() {
      ethTxHash_ = other.ethTxHash_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthTxHashList Clone() {
      return new EthTxHashList(this);
    }

    /// <summary>Field number for the "eth_tx_hash" field.</summary>
    public const int EthTxHashFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ethTxHash_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> ethTxHash_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> EthTxHash {
      get { return ethTxHash_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EthTxHashList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EthTxHashList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ethTxHash_.Equals(other.ethTxHash_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ethTxHash_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ethTxHash_.WriteTo(output, _repeated_ethTxHash_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ethTxHash_.CalculateSize(_repeated_ethTxHash_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EthTxHashList other) {
      if (other == null) {
        return;
      }
      ethTxHash_.Add(other.ethTxHash_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ethTxHash_.AddEntriesFrom(input, _repeated_ethTxHash_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EventDataList : pb::IMessage<EventDataList> {
    private static readonly pb::MessageParser<EventDataList> _parser = new pb::MessageParser<EventDataList>(() => new EventDataList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDataList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataList(EventDataList other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDataList Clone() {
      return new EventDataList(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.Client.Internal.Protobuf.EventData> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.Client.Internal.Protobuf.EventData.Parser);
    private readonly pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EventData> events_ = new pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EventData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EventData> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDataList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDataList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDataList other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EventData : pb::IMessage<EventData> {
    private static readonly pb::MessageParser<EventData> _parser = new pb::MessageParser<EventData>(() => new EventData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData(EventData other) : this() {
      topics_ = other.topics_.Clone();
      caller_ = other.caller_ != null ? other.caller_.Clone() : null;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      pluginName_ = other.pluginName_;
      blockHeight_ = other.blockHeight_;
      encodedBody_ = other.encodedBody_;
      originalRequest_ = other.originalRequest_;
      txHash_ = other.txHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData Clone() {
      return new EventData(this);
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_topics_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> topics_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Topics {
      get { return topics_; }
    }

    /// <summary>Field number for the "caller" field.</summary>
    public const int CallerFieldNumber = 2;
    private global::Loom.Client.Internal.Protobuf.Address caller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Internal.Protobuf.Address Caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private global::Loom.Client.Internal.Protobuf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Loom.Client.Internal.Protobuf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "plugin_name" field.</summary>
    public const int PluginNameFieldNumber = 4;
    private string pluginName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PluginName {
      get { return pluginName_; }
      set {
        pluginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 5;
    private ulong blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "encoded_body" field.</summary>
    public const int EncodedBodyFieldNumber = 6;
    private pb::ByteString encodedBody_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncodedBody {
      get { return encodedBody_; }
      set {
        encodedBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "original_request" field.</summary>
    public const int OriginalRequestFieldNumber = 7;
    private pb::ByteString originalRequest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginalRequest {
      get { return originalRequest_; }
      set {
        originalRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 8;
    private pb::ByteString txHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxHash {
      get { return txHash_; }
      set {
        txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!topics_.Equals(other.topics_)) return false;
      if (!object.Equals(Caller, other.Caller)) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (PluginName != other.PluginName) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (EncodedBody != other.EncodedBody) return false;
      if (OriginalRequest != other.OriginalRequest) return false;
      if (TxHash != other.TxHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= topics_.GetHashCode();
      if (caller_ != null) hash ^= Caller.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (PluginName.Length != 0) hash ^= PluginName.GetHashCode();
      if (BlockHeight != 0UL) hash ^= BlockHeight.GetHashCode();
      if (EncodedBody.Length != 0) hash ^= EncodedBody.GetHashCode();
      if (OriginalRequest.Length != 0) hash ^= OriginalRequest.GetHashCode();
      if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      topics_.WriteTo(output, _repeated_topics_codec);
      if (caller_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Caller);
      }
      if (address_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Address);
      }
      if (PluginName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PluginName);
      }
      if (BlockHeight != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BlockHeight);
      }
      if (EncodedBody.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(EncodedBody);
      }
      if (OriginalRequest.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(OriginalRequest);
      }
      if (TxHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(TxHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += topics_.CalculateSize(_repeated_topics_codec);
      if (caller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caller);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (PluginName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PluginName);
      }
      if (BlockHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockHeight);
      }
      if (EncodedBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncodedBody);
      }
      if (OriginalRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginalRequest);
      }
      if (TxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventData other) {
      if (other == null) {
        return;
      }
      topics_.Add(other.topics_);
      if (other.caller_ != null) {
        if (caller_ == null) {
          caller_ = new global::Loom.Client.Internal.Protobuf.Address();
        }
        Caller.MergeFrom(other.Caller);
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Loom.Client.Internal.Protobuf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.PluginName.Length != 0) {
        PluginName = other.PluginName;
      }
      if (other.BlockHeight != 0UL) {
        BlockHeight = other.BlockHeight;
      }
      if (other.EncodedBody.Length != 0) {
        EncodedBody = other.EncodedBody;
      }
      if (other.OriginalRequest.Length != 0) {
        OriginalRequest = other.OriginalRequest;
      }
      if (other.TxHash.Length != 0) {
        TxHash = other.TxHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
          case 18: {
            if (caller_ == null) {
              caller_ = new global::Loom.Client.Internal.Protobuf.Address();
            }
            input.ReadMessage(caller_);
            break;
          }
          case 26: {
            if (address_ == null) {
              address_ = new global::Loom.Client.Internal.Protobuf.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 34: {
            PluginName = input.ReadString();
            break;
          }
          case 40: {
            BlockHeight = input.ReadUInt64();
            break;
          }
          case 50: {
            EncodedBody = input.ReadBytes();
            break;
          }
          case 58: {
            OriginalRequest = input.ReadBytes();
            break;
          }
          case 66: {
            TxHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TxReceiptList : pb::IMessage<TxReceiptList> {
    private static readonly pb::MessageParser<TxReceiptList> _parser = new pb::MessageParser<TxReceiptList>(() => new TxReceiptList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxReceiptList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceiptList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceiptList(TxReceiptList other) : this() {
      txReceipts_ = other.txReceipts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxReceiptList Clone() {
      return new TxReceiptList(this);
    }

    /// <summary>Field number for the "tx_receipts" field.</summary>
    public const int TxReceiptsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.Client.Internal.Protobuf.EvmTxReceipt> _repeated_txReceipts_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.Client.Internal.Protobuf.EvmTxReceipt.Parser);
    private readonly pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EvmTxReceipt> txReceipts_ = new pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EvmTxReceipt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EvmTxReceipt> TxReceipts {
      get { return txReceipts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxReceiptList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxReceiptList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!txReceipts_.Equals(other.txReceipts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= txReceipts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      txReceipts_.WriteTo(output, _repeated_txReceipts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += txReceipts_.CalculateSize(_repeated_txReceipts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxReceiptList other) {
      if (other == null) {
        return;
      }
      txReceipts_.Add(other.txReceipts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            txReceipts_.AddEntriesFrom(input, _repeated_txReceipts_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EvmTxReceipt : pb::IMessage<EvmTxReceipt> {
    private static readonly pb::MessageParser<EvmTxReceipt> _parser = new pb::MessageParser<EvmTxReceipt>(() => new EvmTxReceipt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvmTxReceipt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvmTxReceipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvmTxReceipt(EvmTxReceipt other) : this() {
      transactionIndex_ = other.transactionIndex_;
      blockHash_ = other.blockHash_;
      blockNumber_ = other.blockNumber_;
      cumulativeGasUsed_ = other.cumulativeGasUsed_;
      gasUsed_ = other.gasUsed_;
      contractAddress_ = other.contractAddress_;
      logs_ = other.logs_.Clone();
      logsBloom_ = other.logsBloom_;
      status_ = other.status_;
      txHash_ = other.txHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvmTxReceipt Clone() {
      return new EvmTxReceipt(this);
    }

    /// <summary>Field number for the "transaction_index" field.</summary>
    public const int TransactionIndexFieldNumber = 1;
    private int transactionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransactionIndex {
      get { return transactionIndex_; }
      set {
        transactionIndex_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 2;
    private pb::ByteString blockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private long blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "cumulative_gas_used" field.</summary>
    public const int CumulativeGasUsedFieldNumber = 4;
    private int cumulativeGasUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CumulativeGasUsed {
      get { return cumulativeGasUsed_; }
      set {
        cumulativeGasUsed_ = value;
      }
    }

    /// <summary>Field number for the "gas_used" field.</summary>
    public const int GasUsedFieldNumber = 5;
    private int gasUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GasUsed {
      get { return gasUsed_; }
      set {
        gasUsed_ = value;
      }
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 6;
    private pb::ByteString contractAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Loom.Client.Internal.Protobuf.EventData> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(58, global::Loom.Client.Internal.Protobuf.EventData.Parser);
    private readonly pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EventData> logs_ = new pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EventData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EventData> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "logs_bloom" field.</summary>
    public const int LogsBloomFieldNumber = 8;
    private pb::ByteString logsBloom_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LogsBloom {
      get { return logsBloom_; }
      set {
        logsBloom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 10;
    private pb::ByteString txHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxHash {
      get { return txHash_; }
      set {
        txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvmTxReceipt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvmTxReceipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionIndex != other.TransactionIndex) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockNumber != other.BlockNumber) return false;
      if (CumulativeGasUsed != other.CumulativeGasUsed) return false;
      if (GasUsed != other.GasUsed) return false;
      if (ContractAddress != other.ContractAddress) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (LogsBloom != other.LogsBloom) return false;
      if (Status != other.Status) return false;
      if (TxHash != other.TxHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionIndex != 0) hash ^= TransactionIndex.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (CumulativeGasUsed != 0) hash ^= CumulativeGasUsed.GetHashCode();
      if (GasUsed != 0) hash ^= GasUsed.GetHashCode();
      if (ContractAddress.Length != 0) hash ^= ContractAddress.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (LogsBloom.Length != 0) hash ^= LogsBloom.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TransactionIndex);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BlockHash);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockNumber);
      }
      if (CumulativeGasUsed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CumulativeGasUsed);
      }
      if (GasUsed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GasUsed);
      }
      if (ContractAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ContractAddress);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      if (LogsBloom.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(LogsBloom);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Status);
      }
      if (TxHash.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(TxHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransactionIndex);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockHash);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (CumulativeGasUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CumulativeGasUsed);
      }
      if (GasUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GasUsed);
      }
      if (ContractAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContractAddress);
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (LogsBloom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LogsBloom);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (TxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvmTxReceipt other) {
      if (other == null) {
        return;
      }
      if (other.TransactionIndex != 0) {
        TransactionIndex = other.TransactionIndex;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      if (other.CumulativeGasUsed != 0) {
        CumulativeGasUsed = other.CumulativeGasUsed;
      }
      if (other.GasUsed != 0) {
        GasUsed = other.GasUsed;
      }
      if (other.ContractAddress.Length != 0) {
        ContractAddress = other.ContractAddress;
      }
      logs_.Add(other.logs_);
      if (other.LogsBloom.Length != 0) {
        LogsBloom = other.LogsBloom;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TxHash.Length != 0) {
        TxHash = other.TxHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransactionIndex = input.ReadInt32();
            break;
          }
          case 18: {
            BlockHash = input.ReadBytes();
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt64();
            break;
          }
          case 32: {
            CumulativeGasUsed = input.ReadInt32();
            break;
          }
          case 40: {
            GasUsed = input.ReadInt32();
            break;
          }
          case 50: {
            ContractAddress = input.ReadBytes();
            break;
          }
          case 58: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 66: {
            LogsBloom = input.ReadBytes();
            break;
          }
          case 72: {
            Status = input.ReadInt32();
            break;
          }
          case 82: {
            TxHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EvmTxObject : pb::IMessage<EvmTxObject> {
    private static readonly pb::MessageParser<EvmTxObject> _parser = new pb::MessageParser<EvmTxObject>(() => new EvmTxObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvmTxObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvmTxObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvmTxObject(EvmTxObject other) : this() {
      hash_ = other.hash_;
      nonce_ = other.nonce_;
      blockHash_ = other.blockHash_;
      blockNumber_ = other.blockNumber_;
      transactionIndex_ = other.transactionIndex_;
      from_ = other.from_;
      to_ = other.to_;
      value_ = other.value_;
      gasPrice_ = other.gasPrice_;
      gas_ = other.gas_;
      input_ = other.input_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvmTxObject Clone() {
      return new EvmTxObject(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    /// <summary>
    /// : DATA, 32 Bytes - hash of the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 2;
    private ulong nonce_;
    /// <summary>
    /// : QUANTITY - the number of transactions made by the sender prior to this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 3;
    private pb::ByteString blockHash_ = pb::ByteString.Empty;
    /// <summary>
    /// : DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 4;
    private long blockNumber_;
    /// <summary>
    /// : QUANTITY - block number where this transaction was in. null when its pending.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "transaction_index" field.</summary>
    public const int TransactionIndexFieldNumber = 5;
    private int transactionIndex_;
    /// <summary>
    /// : QUANTITY - integer of the transactions index position in the block. null when its pending.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransactionIndex {
      get { return transactionIndex_; }
      set {
        transactionIndex_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 6;
    private pb::ByteString from_ = pb::ByteString.Empty;
    /// <summary>
    /// : DATA, 20 Bytes - address of the sender.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 7;
    private pb::ByteString to_ = pb::ByteString.Empty;
    /// <summary>
    /// : DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 8;
    private long value_;
    /// <summary>
    /// : QUANTITY - value transferred in Wei.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "gas_price" field.</summary>
    public const int GasPriceFieldNumber = 9;
    private long gasPrice_;
    /// <summary>
    /// : QUANTITY - gas price provided by the sender in Wei.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GasPrice {
      get { return gasPrice_; }
      set {
        gasPrice_ = value;
      }
    }

    /// <summary>Field number for the "gas" field.</summary>
    public const int GasFieldNumber = 10;
    private long gas_;
    /// <summary>
    /// : QUANTITY - gas provided by the sender.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gas {
      get { return gas_; }
      set {
        gas_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 11;
    private pb::ByteString input_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA - the data send along with the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Input {
      get { return input_; }
      set {
        input_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvmTxObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvmTxObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Nonce != other.Nonce) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockNumber != other.BlockNumber) return false;
      if (TransactionIndex != other.TransactionIndex) return false;
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Value != other.Value) return false;
      if (GasPrice != other.GasPrice) return false;
      if (Gas != other.Gas) return false;
      if (Input != other.Input) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (TransactionIndex != 0) hash ^= TransactionIndex.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (GasPrice != 0L) hash ^= GasPrice.GetHashCode();
      if (Gas != 0L) hash ^= Gas.GetHashCode();
      if (Input.Length != 0) hash ^= Input.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (Nonce != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Nonce);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(BlockHash);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BlockNumber);
      }
      if (TransactionIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TransactionIndex);
      }
      if (From.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(To);
      }
      if (Value != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Value);
      }
      if (GasPrice != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(GasPrice);
      }
      if (Gas != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Gas);
      }
      if (Input.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(Input);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockHash);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (TransactionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransactionIndex);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(To);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (GasPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GasPrice);
      }
      if (Gas != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gas);
      }
      if (Input.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Input);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvmTxObject other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      if (other.TransactionIndex != 0) {
        TransactionIndex = other.TransactionIndex;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.GasPrice != 0L) {
        GasPrice = other.GasPrice;
      }
      if (other.Gas != 0L) {
        Gas = other.Gas;
      }
      if (other.Input.Length != 0) {
        Input = other.Input;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 16: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 26: {
            BlockHash = input.ReadBytes();
            break;
          }
          case 32: {
            BlockNumber = input.ReadInt64();
            break;
          }
          case 40: {
            TransactionIndex = input.ReadInt32();
            break;
          }
          case 50: {
            From = input.ReadBytes();
            break;
          }
          case 58: {
            To = input.ReadBytes();
            break;
          }
          case 64: {
            Value = input.ReadInt64();
            break;
          }
          case 72: {
            GasPrice = input.ReadInt64();
            break;
          }
          case 80: {
            Gas = input.ReadInt64();
            break;
          }
          case 90: {
            Input = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EthBlockInfo : pb::IMessage<EthBlockInfo> {
    private static readonly pb::MessageParser<EthBlockInfo> _parser = new pb::MessageParser<EthBlockInfo>(() => new EthBlockInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EthBlockInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthBlockInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthBlockInfo(EthBlockInfo other) : this() {
      number_ = other.number_;
      hash_ = other.hash_;
      parentHash_ = other.parentHash_;
      nonce_ = other.nonce_;
      sha3Uncles_ = other.sha3Uncles_;
      logsBloom_ = other.logsBloom_;
      transactionsRoot_ = other.transactionsRoot_;
      stateRoot_ = other.stateRoot_;
      receiptsRoot_ = other.receiptsRoot_;
      miner_ = other.miner_;
      difficulty_ = other.difficulty_;
      totalDifficulty_ = other.totalDifficulty_;
      extraData_ = other.extraData_;
      size_ = other.size_;
      gasLimit_ = other.gasLimit_;
      gasUsed_ = other.gasUsed_;
      timestamp_ = other.timestamp_;
      transactions_ = other.transactions_.Clone();
      uncles_ = other.uncles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthBlockInfo Clone() {
      return new EthBlockInfo(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private long number_;
    /// <summary>
    ///: QUANTITY - the block number. null when its pending block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 32 Bytes - hash of the block. null when its pending block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_hash" field.</summary>
    public const int ParentHashFieldNumber = 3;
    private pb::ByteString parentHash_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 32 Bytes - hash of the parent block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ParentHash {
      get { return parentHash_; }
      set {
        parentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 4;
    private pb::ByteString nonce_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sha3_uncles" field.</summary>
    public const int Sha3UnclesFieldNumber = 5;
    private pb::ByteString sha3Uncles_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 32 Bytes - SHA3 of the uncles data in the block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sha3Uncles {
      get { return sha3Uncles_; }
      set {
        sha3Uncles_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logs_bloom" field.</summary>
    public const int LogsBloomFieldNumber = 6;
    private pb::ByteString logsBloom_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LogsBloom {
      get { return logsBloom_; }
      set {
        logsBloom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transactions_root" field.</summary>
    public const int TransactionsRootFieldNumber = 7;
    private pb::ByteString transactionsRoot_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 32 Bytes - the root of the transaction trie of the block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionsRoot {
      get { return transactionsRoot_; }
      set {
        transactionsRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_root" field.</summary>
    public const int StateRootFieldNumber = 8;
    private pb::ByteString stateRoot_ = pb::ByteString.Empty;
    /// <summary>
    ///t: DATA, 32 Bytes - the root of the final state trie of the block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StateRoot {
      get { return stateRoot_; }
      set {
        stateRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receipts_root" field.</summary>
    public const int ReceiptsRootFieldNumber = 9;
    private pb::ByteString receiptsRoot_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 32 Bytes - the root of the receipts trie of the block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReceiptsRoot {
      get { return receiptsRoot_; }
      set {
        receiptsRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "miner" field.</summary>
    public const int MinerFieldNumber = 10;
    private pb::ByteString miner_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Miner {
      get { return miner_; }
      set {
        miner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 11;
    private long difficulty_;
    /// <summary>
    ///: QUANTITY - integer of the difficulty for this block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "total_difficulty" field.</summary>
    public const int TotalDifficultyFieldNumber = 12;
    private long totalDifficulty_;
    /// <summary>
    ///: QUANTITY - integer of the total difficulty of the chain until this block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalDifficulty {
      get { return totalDifficulty_; }
      set {
        totalDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "extra_data" field.</summary>
    public const int ExtraDataFieldNumber = 13;
    private pb::ByteString extraData_ = pb::ByteString.Empty;
    /// <summary>
    ///: DATA - the "extra data" field of this block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraData {
      get { return extraData_; }
      set {
        extraData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 14;
    private long size_;
    /// <summary>
    ///: QUANTITY - integer the size of this block in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "gasLimit" field.</summary>
    public const int GasLimitFieldNumber = 15;
    private long gasLimit_;
    /// <summary>
    ///: QUANTITY - the maximum gas allowed in this block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GasLimit {
      get { return gasLimit_; }
      set {
        gasLimit_ = value;
      }
    }

    /// <summary>Field number for the "gasUsed" field.</summary>
    public const int GasUsedFieldNumber = 16;
    private long gasUsed_;
    /// <summary>
    ///: QUANTITY - the total used gas by all transactions in this block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GasUsed {
      get { return gasUsed_; }
      set {
        gasUsed_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 17;
    private long timestamp_;
    /// <summary>
    ///: QUANTITY - the unix timestamp for when the block was collated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 18;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_transactions_codec
        = pb::FieldCodec.ForBytes(146);
    private readonly pbc::RepeatedField<pb::ByteString> transactions_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///: Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "uncles" field.</summary>
    public const int UnclesFieldNumber = 19;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_uncles_codec
        = pb::FieldCodec.ForBytes(154);
    private readonly pbc::RepeatedField<pb::ByteString> uncles_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///: Array - Array of uncle hashes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Uncles {
      get { return uncles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EthBlockInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EthBlockInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Hash != other.Hash) return false;
      if (ParentHash != other.ParentHash) return false;
      if (Nonce != other.Nonce) return false;
      if (Sha3Uncles != other.Sha3Uncles) return false;
      if (LogsBloom != other.LogsBloom) return false;
      if (TransactionsRoot != other.TransactionsRoot) return false;
      if (StateRoot != other.StateRoot) return false;
      if (ReceiptsRoot != other.ReceiptsRoot) return false;
      if (Miner != other.Miner) return false;
      if (Difficulty != other.Difficulty) return false;
      if (TotalDifficulty != other.TotalDifficulty) return false;
      if (ExtraData != other.ExtraData) return false;
      if (Size != other.Size) return false;
      if (GasLimit != other.GasLimit) return false;
      if (GasUsed != other.GasUsed) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      if(!uncles_.Equals(other.uncles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0L) hash ^= Number.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (ParentHash.Length != 0) hash ^= ParentHash.GetHashCode();
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      if (Sha3Uncles.Length != 0) hash ^= Sha3Uncles.GetHashCode();
      if (LogsBloom.Length != 0) hash ^= LogsBloom.GetHashCode();
      if (TransactionsRoot.Length != 0) hash ^= TransactionsRoot.GetHashCode();
      if (StateRoot.Length != 0) hash ^= StateRoot.GetHashCode();
      if (ReceiptsRoot.Length != 0) hash ^= ReceiptsRoot.GetHashCode();
      if (Miner.Length != 0) hash ^= Miner.GetHashCode();
      if (Difficulty != 0L) hash ^= Difficulty.GetHashCode();
      if (TotalDifficulty != 0L) hash ^= TotalDifficulty.GetHashCode();
      if (ExtraData.Length != 0) hash ^= ExtraData.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (GasLimit != 0L) hash ^= GasLimit.GetHashCode();
      if (GasUsed != 0L) hash ^= GasUsed.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= transactions_.GetHashCode();
      hash ^= uncles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Number);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Hash);
      }
      if (ParentHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ParentHash);
      }
      if (Nonce.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Nonce);
      }
      if (Sha3Uncles.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Sha3Uncles);
      }
      if (LogsBloom.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(LogsBloom);
      }
      if (TransactionsRoot.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(TransactionsRoot);
      }
      if (StateRoot.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(StateRoot);
      }
      if (ReceiptsRoot.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ReceiptsRoot);
      }
      if (Miner.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Miner);
      }
      if (Difficulty != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Difficulty);
      }
      if (TotalDifficulty != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(TotalDifficulty);
      }
      if (ExtraData.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(ExtraData);
      }
      if (Size != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Size);
      }
      if (GasLimit != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(GasLimit);
      }
      if (GasUsed != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(GasUsed);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(Timestamp);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      uncles_.WriteTo(output, _repeated_uncles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (ParentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentHash);
      }
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nonce);
      }
      if (Sha3Uncles.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sha3Uncles);
      }
      if (LogsBloom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LogsBloom);
      }
      if (TransactionsRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionsRoot);
      }
      if (StateRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StateRoot);
      }
      if (ReceiptsRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReceiptsRoot);
      }
      if (Miner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Miner);
      }
      if (Difficulty != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Difficulty);
      }
      if (TotalDifficulty != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalDifficulty);
      }
      if (ExtraData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraData);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (GasLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GasLimit);
      }
      if (GasUsed != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GasUsed);
      }
      if (Timestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      size += uncles_.CalculateSize(_repeated_uncles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EthBlockInfo other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0L) {
        Number = other.Number;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.ParentHash.Length != 0) {
        ParentHash = other.ParentHash;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      if (other.Sha3Uncles.Length != 0) {
        Sha3Uncles = other.Sha3Uncles;
      }
      if (other.LogsBloom.Length != 0) {
        LogsBloom = other.LogsBloom;
      }
      if (other.TransactionsRoot.Length != 0) {
        TransactionsRoot = other.TransactionsRoot;
      }
      if (other.StateRoot.Length != 0) {
        StateRoot = other.StateRoot;
      }
      if (other.ReceiptsRoot.Length != 0) {
        ReceiptsRoot = other.ReceiptsRoot;
      }
      if (other.Miner.Length != 0) {
        Miner = other.Miner;
      }
      if (other.Difficulty != 0L) {
        Difficulty = other.Difficulty;
      }
      if (other.TotalDifficulty != 0L) {
        TotalDifficulty = other.TotalDifficulty;
      }
      if (other.ExtraData.Length != 0) {
        ExtraData = other.ExtraData;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      if (other.GasLimit != 0L) {
        GasLimit = other.GasLimit;
      }
      if (other.GasUsed != 0L) {
        GasUsed = other.GasUsed;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      transactions_.Add(other.transactions_);
      uncles_.Add(other.uncles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Number = input.ReadInt64();
            break;
          }
          case 18: {
            Hash = input.ReadBytes();
            break;
          }
          case 26: {
            ParentHash = input.ReadBytes();
            break;
          }
          case 34: {
            Nonce = input.ReadBytes();
            break;
          }
          case 42: {
            Sha3Uncles = input.ReadBytes();
            break;
          }
          case 50: {
            LogsBloom = input.ReadBytes();
            break;
          }
          case 58: {
            TransactionsRoot = input.ReadBytes();
            break;
          }
          case 66: {
            StateRoot = input.ReadBytes();
            break;
          }
          case 74: {
            ReceiptsRoot = input.ReadBytes();
            break;
          }
          case 82: {
            Miner = input.ReadBytes();
            break;
          }
          case 88: {
            Difficulty = input.ReadInt64();
            break;
          }
          case 96: {
            TotalDifficulty = input.ReadInt64();
            break;
          }
          case 106: {
            ExtraData = input.ReadBytes();
            break;
          }
          case 112: {
            Size = input.ReadInt64();
            break;
          }
          case 120: {
            GasLimit = input.ReadInt64();
            break;
          }
          case 128: {
            GasUsed = input.ReadInt64();
            break;
          }
          case 136: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 146: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 154: {
            uncles_.AddEntriesFrom(input, _repeated_uncles_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EthFilterLogList : pb::IMessage<EthFilterLogList> {
    private static readonly pb::MessageParser<EthFilterLogList> _parser = new pb::MessageParser<EthFilterLogList>(() => new EthFilterLogList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EthFilterLogList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterLogList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterLogList(EthFilterLogList other) : this() {
      ethBlockLogs_ = other.ethBlockLogs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterLogList Clone() {
      return new EthFilterLogList(this);
    }

    /// <summary>Field number for the "eth_block_logs" field.</summary>
    public const int EthBlockLogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Loom.Client.Internal.Protobuf.EthFilterLog> _repeated_ethBlockLogs_codec
        = pb::FieldCodec.ForMessage(10, global::Loom.Client.Internal.Protobuf.EthFilterLog.Parser);
    private readonly pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EthFilterLog> ethBlockLogs_ = new pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EthFilterLog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Loom.Client.Internal.Protobuf.EthFilterLog> EthBlockLogs {
      get { return ethBlockLogs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EthFilterLogList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EthFilterLogList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ethBlockLogs_.Equals(other.ethBlockLogs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ethBlockLogs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ethBlockLogs_.WriteTo(output, _repeated_ethBlockLogs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ethBlockLogs_.CalculateSize(_repeated_ethBlockLogs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EthFilterLogList other) {
      if (other == null) {
        return;
      }
      ethBlockLogs_.Add(other.ethBlockLogs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ethBlockLogs_.AddEntriesFrom(input, _repeated_ethBlockLogs_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EthFilterLog : pb::IMessage<EthFilterLog> {
    private static readonly pb::MessageParser<EthFilterLog> _parser = new pb::MessageParser<EthFilterLog>(() => new EthFilterLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EthFilterLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Loom.Client.Internal.Protobuf.EvmReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterLog(EthFilterLog other) : this() {
      removed_ = other.removed_;
      logIndex_ = other.logIndex_;
      transactionIndex_ = other.transactionIndex_;
      transactionHash_ = other.transactionHash_;
      blockHash_ = other.blockHash_;
      blockNumber_ = other.blockNumber_;
      address_ = other.address_;
      data_ = other.data_;
      topics_ = other.topics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EthFilterLog Clone() {
      return new EthFilterLog(this);
    }

    /// <summary>Field number for the "removed" field.</summary>
    public const int RemovedFieldNumber = 1;
    private bool removed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Removed {
      get { return removed_; }
      set {
        removed_ = value;
      }
    }

    /// <summary>Field number for the "log_index" field.</summary>
    public const int LogIndexFieldNumber = 2;
    private long logIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LogIndex {
      get { return logIndex_; }
      set {
        logIndex_ = value;
      }
    }

    /// <summary>Field number for the "transaction_index" field.</summary>
    public const int TransactionIndexFieldNumber = 3;
    private int transactionIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransactionIndex {
      get { return transactionIndex_; }
      set {
        transactionIndex_ = value;
      }
    }

    /// <summary>Field number for the "transaction_hash" field.</summary>
    public const int TransactionHashFieldNumber = 4;
    private pb::ByteString transactionHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionHash {
      get { return transactionHash_; }
      set {
        transactionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 5;
    private pb::ByteString blockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 6;
    private long blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 7;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topics" field.</summary>
    public const int TopicsFieldNumber = 9;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_topics_codec
        = pb::FieldCodec.ForBytes(74);
    private readonly pbc::RepeatedField<pb::ByteString> topics_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Topics {
      get { return topics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EthFilterLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EthFilterLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Removed != other.Removed) return false;
      if (LogIndex != other.LogIndex) return false;
      if (TransactionIndex != other.TransactionIndex) return false;
      if (TransactionHash != other.TransactionHash) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockNumber != other.BlockNumber) return false;
      if (Address != other.Address) return false;
      if (Data != other.Data) return false;
      if(!topics_.Equals(other.topics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Removed != false) hash ^= Removed.GetHashCode();
      if (LogIndex != 0L) hash ^= LogIndex.GetHashCode();
      if (TransactionIndex != 0) hash ^= TransactionIndex.GetHashCode();
      if (TransactionHash.Length != 0) hash ^= TransactionHash.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= topics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Removed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Removed);
      }
      if (LogIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LogIndex);
      }
      if (TransactionIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TransactionIndex);
      }
      if (TransactionHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(TransactionHash);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(BlockHash);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(BlockNumber);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Address);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Data);
      }
      topics_.WriteTo(output, _repeated_topics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Removed != false) {
        size += 1 + 1;
      }
      if (LogIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LogIndex);
      }
      if (TransactionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransactionIndex);
      }
      if (TransactionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionHash);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockHash);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += topics_.CalculateSize(_repeated_topics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EthFilterLog other) {
      if (other == null) {
        return;
      }
      if (other.Removed != false) {
        Removed = other.Removed;
      }
      if (other.LogIndex != 0L) {
        LogIndex = other.LogIndex;
      }
      if (other.TransactionIndex != 0) {
        TransactionIndex = other.TransactionIndex;
      }
      if (other.TransactionHash.Length != 0) {
        TransactionHash = other.TransactionHash;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      topics_.Add(other.topics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Removed = input.ReadBool();
            break;
          }
          case 16: {
            LogIndex = input.ReadInt64();
            break;
          }
          case 24: {
            TransactionIndex = input.ReadInt32();
            break;
          }
          case 34: {
            TransactionHash = input.ReadBytes();
            break;
          }
          case 42: {
            BlockHash = input.ReadBytes();
            break;
          }
          case 48: {
            BlockNumber = input.ReadInt64();
            break;
          }
          case 58: {
            Address = input.ReadBytes();
            break;
          }
          case 66: {
            Data = input.ReadBytes();
            break;
          }
          case 74: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
