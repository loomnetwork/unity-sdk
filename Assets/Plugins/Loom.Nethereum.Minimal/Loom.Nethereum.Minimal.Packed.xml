<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Loom.Nethereum.Minimal.Packed</name>
    </assembly>
    <members>
        <member name="T:Loom.Nethereum.ABI.ABIType">
            <summary>
                Generic ABI type
            </summary>
        </member>
        <member name="P:Loom.Nethereum.ABI.ABIType.Name">
            <summary>
                The type name as it was specified in the interface description
            </summary>
        </member>
        <member name="P:Loom.Nethereum.ABI.ABIType.CanonicalName">
            <summary>
                The canonical type name (used for the method signature creation)
                E.g. 'int' - canonical 'int256'
            </summary>
        </member>
        <member name="P:Loom.Nethereum.ABI.ABIType.FixedSize">
            <returns> fixed size in bytes or negative value if the type is dynamic </returns>
        </member>
        <member name="M:Loom.Nethereum.ABI.ABIType.Encode(System.Object)">
            <summary>
                Encodes the value according to specific type rules
            </summary>
            <param name="value" />
        </member>
        <member name="M:Loom.Nethereum.ABI.FunctionEncoding.FunctionCallDecoder.DecodeOutput``1(System.String,Loom.Nethereum.ABI.Model.Parameter[])">
            <summary>
                Decodes the output of a function using either a FunctionOutputAttribute  (T)
                or the parameter casted to the type T, only one outputParameter should be used in this scenario.
            </summary>
        </member>
        <member name="T:Loom.Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter">
            <summary>
                This is a replication (copy) of Newtonsoft ExpandoObjectConverter to allow for PCL compilaton
            </summary>
        </member>
        <member name="P:Loom.Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.CanWrite">
            <summary>
                Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Loom.Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
                Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Loom.Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Loom.Nethereum.ABI.JsonDeserialisation.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
                Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Number">
            <summary>
                QUANTITY - the block number. null when its pending block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Author">
            <summary>
             block author.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.SealFields">
            <summary>
             Seal fiels.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.ParentHash">
            <summary>
                DATA, 32 Bytes - hash of the parent block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Nonce">
            <summary>
                DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Sha3Uncles">
            <summary>
                DATA, 32 Bytes - SHA3 of the uncles data in the block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.LogsBloom">
            <summary>
                DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.TransactionsRoot">
            <summary>
                DATA, 32 Bytes - the root of the transaction trie of the block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.StateRoot">
            <summary>
                DATA, 32 Bytes - the root of the final state trie of the block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.ReceiptsRoot">
            <summary>
                DATA, 32 Bytes - the root of the receipts trie of the block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Miner">
            <summary>
                DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Difficulty">
            <summary>
                QUANTITY - integer of the difficulty for this block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.TotalDifficulty">
            <summary>
                QUANTITY - integer of the total difficulty of the chain until this block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.ExtraData">
            <summary>
                DATA - the "extra data" field of this block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Size">
            <summary>
                QUANTITY - integer the size of this block in bytes.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.GasLimit">
            <summary>
                QUANTITY - the maximum gas allowed in this block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.GasUsed">
            <summary>
                QUANTITY - the total used gas by all transactions in this block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Timestamp">
            <summary>
                QUANTITY - the unix timestamp for when the block was collated.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Block.Uncles">
            <summary>
                Array - Array of uncle hashes.
            </summary>
        </member>
        <member name="T:Loom.Nethereum.RPC.Eth.DTOs.BlockWithTransactionHashes">
            <summary>
                Block including just the transaction hashes
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.BlockWithTransactionHashes.TransactionHashes">
            <summary>
                Array - Array of transaction hashes
            </summary>
        </member>
        <member name="T:Loom.Nethereum.RPC.Eth.DTOs.BlockWithTransactions">
            <summary>
                Block including transaction objects
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.BlockWithTransactions.Transactions">
            <summary>
                Array - Array of transaction objects
            </summary>
        </member>
        <member name="T:Loom.Nethereum.RPC.Eth.DTOs.CallInput">
            <summary>
                Object - The transaction call object
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.CallInput.From">
            <summary>
                DATA, 20 Bytes - The address the transaction is send from.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.CallInput.To">
            <summary>
                DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.CallInput.Gas">
            <summary>
                QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution.It will return
                unused gas.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.CallInput.GasPrice">
            <summary>
                gasPrice: QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.CallInput.Value">
            <summary>
                value: QUANTITY - (optional) Integer of the value send with this transaction
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.CallInput.Data">
            <summary>
                data: DATA - (optional) The compiled code of a contract
            </summary>
        </member>
        <member name="T:Loom.Nethereum.RPC.Eth.DTOs.NewFilterInput">
            <summary>
                Object - The transaction object
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.NewFilterInput.FromBlock">
            <summary>
                QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block or
                "pending", "earliest" for not yet mined transactions.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.NewFilterInput.ToBlock">
            <summary>
                QUANTITY|TAG - (optional, default: "latest") Integer block number, or "latest" for the last mined block or
                "pending", "earliest" for not yet mined transactions.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.NewFilterInput.Address">
            <summary>
                address: DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should
                originate.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.NewFilterInput.Topics">
            <summary>
                topics: Array of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also
                be an array of DATA with "or" options.
            </summary>
            <see cref="!:https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#events" />
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.Removed">
            <summary>
            true when the log was removed, due to a chain reorganization. false if its a valid log.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.Type">
            <summary>
                TAG - pending when the log is pending. mined if log is already mined..
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.LogIndex">
            <summary>
                QUANTITY - integer of the log index position in the block. null when its pending log.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.TransactionHash">
            <summary>
                DATA, 32 Bytes - hash of the transactions this log was created from. null when its pending log.DATA, 32 Bytes -
                hash of the transaction.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.TransactionIndex">
            <summary>
                QUANTITY - integer of the transactions index position log was created from. null when its pending log.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.BlockNumber">
            <summary>
                QUANTITY - the block number where this log was in. null when its pending. null when its pending log.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.Address">
            <summary>
                DATA, 20 Bytes - address from which this log originated.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.Data">
            <summary>
                DATA - contains one or more 32 Bytes non-indexed arguments of the log.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.FilterLog.Topics">
            <summary>
                Array of DATA - Array of 0 to 4 32 Bytes DATA of indexed log arguments.
                (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)),
                except you declared the event with the anonymous specifier.)
            </summary>
        </member>
        <member name="T:Loom.Nethereum.RPC.Eth.DTOs.SyncingOutput">
            <summary>
                Object - The transaction object
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.SyncingOutput.IsSyncing">
            <summary>
                Is it syncing?
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.SyncingOutput.StartingBlock">
            <summary>
                StartingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his
                head)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.SyncingOutput.CurrentBlock">
            <summary>
                CurrentBlock: QUANTITY - The current block, same as eth_blockNumber
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.SyncingOutput.HighestBlock">
            <summary>
                HighestBlock: QUANTITY - The estimated highest block
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.TransactionHash">
            <summary>
                DATA, 32 Bytes - hash of the transaction.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.TransactionIndex">
            <summary>
                QUANTITY - integer of the transactions index position in the block. null when its pending.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.BlockNumber">
            <summary>
                QUANTITY - block number where this transaction was in. null when its pending.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.From">
            <summary>
                DATA, 20 Bytes - The address the transaction is send from.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.To">
            <summary>
                DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.Gas">
            <summary>
              QUANTITY - gas provided by the sender.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.GasPrice">
            <summary>
              QUANTITY - gas price provided by the sender in Wei.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.Value">
            <summary>
                QUANTITY - value transferred in Wei.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.Input">
            <summary>
                DATA - the data send along with the transaction.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.Transaction.Nonce">
            <summary>
                QUANTITY - the number of transactions made by the sender prior to this one.
            </summary>
        </member>
        <member name="T:Loom.Nethereum.RPC.Eth.DTOs.TransactionInput">
            <summary>
                Object - The transaction object
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionInput.Nonce">
            <summary>
                nonce: QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use
                the same nonce.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.TransactionHash">
            <summary>
                DATA, 32 Bytes - hash of the transaction.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.TransactionIndex">
            <summary>
                QUANTITY - integer of the transactions index position in the block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.BlockHash">
            <summary>
                DATA, 32 Bytes - hash of the block where this transaction was in.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.BlockNumber">
            <summary>
                QUANTITY - block number where this transaction was in.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.CumulativeGasUsed">
            <summary>
                QUANTITY - The total amount of gas used when this transaction was executed in the block.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.GasUsed">
            <summary>
                QUANTITY - The amount of gas used by this specific transaction alone.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.ContractAddress">
            <summary>
                DATA, 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null.
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.Status">
            <summary>
                QUANTITY / BOOLEAN Transaction Success 1, Transaction Failed 0
            </summary>
        </member>
        <member name="P:Loom.Nethereum.RPC.Eth.DTOs.TransactionReceipt.Logs">
            <summary>
                logs: Array - Array of log objects, which this transaction generated.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseExtensions.GetResult``1(Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Parses and returns the result of the rpc response as the type specified. 
            Otherwise throws a parsing exception
            </summary>
            <typeparam name="T">Type of object to parse the response as</typeparam>
            <param name="response">Rpc response object</param>
            <param name="returnDefaultIfNull">Returns the type's default value if the result is null. Otherwise throws parsing exception</param>
            <returns>Result of response as type specified</returns>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage.#ctor(System.Object)">
            <param name="id">Request id</param>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage.#ctor(System.Object,Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcError)">
            <param name="id">Request id</param>
            <param name="error">Request error</param>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage.#ctor(System.Object,Newtonsoft.Json.Linq.JToken)">
            <param name="id">Request id</param>
            <param name="result">Response result object</param>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage.Id">
            <summary>
            Request id (Required but nullable)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage.JsonRpcVersion">
            <summary>
            Rpc request version (Required)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage.Result">
            <summary>
            Reponse result object (Required)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcResponseMessage.Error">
            <summary>
            Error from processing Rpc request (Required)
            </summary>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage.#ctor(System.Object,System.String,System.Object[])">
            <param name="id">Request id</param>
            <param name="method">Target method name</param>
            <param name="parameterList">List of parameters for the target method</param>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage.#ctor(System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <param name="id">Request id</param>
            <param name="method">Target method name</param>
            <param name="parameterMap">Map of parameter name to parameter value for the target method</param>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage.Id">
            <summary>
            Request Id (Optional)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage.JsonRpcVersion">
            <summary>
            Version of the JsonRpc to be used (Required)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage.Method">
            <summary>
            Name of the target method (Required)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcRequestMessage.RawParameters">
            <summary>
            Parameters to invoke the method with (Optional)
            </summary>
        </member>
        <member name="T:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcParametersJsonConverter">
            <summary>
            Json converter for Rpc parameters
            </summary>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcParametersJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the value of the parameters to json format
            </summary>
            <param name="writer">Json writer</param>
            <param name="value">Value to be converted to json format</param>
            <param name="serializer">Json serializer</param>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcParametersJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read the json format and return the correct object type/value for it
            </summary>
            <param name="reader">Json reader</param>
            <param name="objectType">Type of property being set</param>
            <param name="existingValue">The current value of the property being set</param>
            <param name="serializer">Json serializer</param>
            <returns>The object value of the converted json value</returns>
        </member>
        <member name="M:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcParametersJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines if the type can be convertered with this converter
            </summary>
            <param name="objectType">Type of the object</param>
            <returns>True if the converter converts the specified type, otherwise False</returns>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcError.Code">
            <summary>
            Rpc error code
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcError.Message">
            <summary>
            Error message (Required)
            </summary>
        </member>
        <member name="P:Loom.Nethereum.JsonRpc.Client.RpcMessages.RpcError.Data">
            <summary>
            Error data (Optional)
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.BulkCopy(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copies a specified number of bytes from a source pointer to a destination pointer.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.BulkXor(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copies a specified number of bytes from a source pointer to a destination pointer.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.Encode32(System.Byte*,System.UInt32)">
            <summary>
            Encode an integer to byte array on any alignment in little endian format.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.Decode32(System.Byte*)">
            <summary>
            Decode an integer from byte array on any alignment in little endian format.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.Salsa208(System.UInt32*)">
            <summary>
            Apply the salsa20/8 core to the provided block.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.R(System.UInt32,System.Int32)">
            <summary>
            Utility method for Salsa208.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.BlockMix(System.UInt32*,System.UInt32*,System.UInt32*,System.Int32)">
            <summary>
            Compute Bout = BlockMix_{salsa20/8, r}(Bin).  The input Bin must be 128r
            bytes in length; the output Bout must also be the same size.
            The temporary space X must be 64 bytes.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.Integerify(System.UInt32*,System.Int32)">
            <summary>
            Return the result of parsing B_{2r-1} as a little-endian integer.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.ScryptNet.SMix(System.Byte*,System.Int32,System.Int32,System.UInt32*,System.UInt32*)">
            <summary>
            Compute B = SMix_r(B, N).  The input B must be 128r bytes in length;
            the temporary storage V must be 128rN bytes in length; the temporary
            storage XY must be 256r + 64 bytes in length.  The value N must be a
            power of 2 greater than 1.  The arrays B, V, and XY must be aligned to a
            multiple of 64 bytes.
            </summary>
        </member>
        <member name="T:Loom.Nethereum.KeyStore.Crypto.SCrypt">
            <summary>Implementation of the scrypt a password-based key derivation function.</summary>
            <remarks>
            Scrypt was created by Colin Percival and is specified in
            <a href="http://tools.ietf.org/html/draft-josefsson-scrypt-kdf-01">draft-josefsson-scrypt-kd</a>.
            </remarks>
        </member>
        <member name="M:Loom.Nethereum.KeyStore.Crypto.SCrypt.Generate(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Generate a key using the scrypt key derivation function.</summary>
            <param name="P">the bytes of the pass phrase.</param>
            <param name="S">the salt to use for this invocation.</param>
            <param name="N">CPU/Memory cost parameter. Must be larger than 1, a power of 2 and less than
                <code>2^(128 * r / 8)</code>.</param>
            <param name="r">the block size, must be &gt;= 1.</param>
            <param name="p">Parallelization parameter. Must be a positive integer less than or equal to
                <code>Int32.MaxValue / (128 * r * 8)</code>.</param>
            <param name="dkLen">the length of the key to generate.</param>
            <returns>the generated key.</returns>
        </member>
        <member name="M:Loom.Nethereum.Util.AddressUtil.IsValidEthereumAdressHexFormat(System.String)">
            <summary>
            Validates if the hex string is 40 alphanumeric characters
            </summary>
        </member>
        <member name="T:Loom.Nethereum.Util.BigDecimal">
            BigNumber based on the original http://uberscraper.blogspot.co.uk/2013/09/c-bigdecimal-class-from-stackoverflow.html
            which was inspired by http://stackoverflow.com/a/4524254
            Original Author: Jan Christoph Bernack (contact: jc.bernack at googlemail.com)
            Changes JB: Added parse, Fix Normalise, Added Floor, New ToString, Change Equals (normalise to validate first), Change Casting to avoid overflows (even if might be slower), Added Normalise Bigger than zero, test on operations, parsing, casting, and other test coverage for ethereum unit conversions
            Changes KJ: Added Culture formatting
            http://stackoverflow.com/a/13813535/956364" /&gt;
            <summary>
                Arbitrary precision Decimal.
                All operations are exact, except for division.
                Division never determines more digits than the given precision of 50.
            </summary></member>
        <member name="F:Loom.Nethereum.Util.BigDecimal.Precision">
            <summary>
                Sets the maximum precision of division operations.
                If AlwaysTruncate is set to true all operations are affected.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.Util.BigDecimal.#ctor(System.Numerics.BigInteger,System.Int32,System.Boolean)">
            <summary />
            <param name="mantissa" />
            <param name="exponent">
                The number of decimal units for example (-18). A positive value will be normalised as 10 ^
                exponent
            </param>
            <param name="alwaysTruncate">
                Specifies whether the significant digits should be truncated to the given precision after
                each operation.
            </param>
        </member>
        <member name="M:Loom.Nethereum.Util.BigDecimal.Normalize">
            <summary>
                Removes trailing zeros on the mantissa
            </summary>
        </member>
        <member name="M:Loom.Nethereum.Util.BigDecimal.Truncate(System.Int32)">
            <summary>
                Truncate the number to the given precision by removing the least significant digits.
            </summary>
            <returns>The truncated number</returns>
        </member>
        <member name="M:Loom.Nethereum.Util.BigDecimal.Floor">
            <summary>
                Truncate the number, removing all decimal digits.
            </summary>
            <returns>The truncated number</returns>
        </member>
        <member name="M:Loom.Nethereum.Util.BigDecimal.AlignExponent(Loom.Nethereum.Util.BigDecimal,Loom.Nethereum.Util.BigDecimal)">
            <summary>
                Returns the mantissa of value, aligned to the exponent of reference.
                Assumes the exponent of value is larger than of value.
            </summary>
        </member>
        <member name="M:Loom.Nethereum.Util.ByteUtil.AppendByte(System.Byte[],System.Byte)">
            <summary>
                Creates a copy of bytes and appends b to the end of it
            </summary>
        </member>
        <member name="M:Loom.Nethereum.Util.ByteUtil.Merge(System.Byte[][])">
            <param name="arrays"> - arrays to merge </param>
            <returns> - merged array </returns>
        </member>
        <member name="M:Loom.Nethereum.Util.UnitConversion.FromWei(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
                Converts from wei to a unit, NOTE: When the total number of digits is bigger than 29 they will be rounded the less
                significant digits
            </summary>
        </member>
        <member name="M:Loom.Nethereum.Util.UnitConversion.FromWei(System.Numerics.BigInteger,Loom.Nethereum.Util.UnitConversion.EthUnit)">
            <summary>
                Converts from wei to a unit, NOTE: When the total number of digits is bigger than 29 they will be rounded the less
                significant digits
            </summary>
        </member>
        <member name="M:Loom.Nethereum.Util.UnitConversion.FromWei(System.Numerics.BigInteger,System.Int32)">
            <summary>
                Converts from wei to a unit, NOTE: When the total number of digits is bigger than 29 they will be rounded the less
                significant digits
            </summary>
        </member>
    </members>
</doc>